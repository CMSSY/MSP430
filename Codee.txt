/*
 * main.c
 */


#define TIMER_CFG_STOP  ID_3 | TASSEL_2 | MC__STOP | TACLR;
#define TIMER_CFG_UP    ID_3 | TASSEL_2 | MC__UP | TACLR;

#define UART_CLK_SEL    0x0080      // Specifies accurate clock for UART peripheral
#define BR0_FOR_9600    0x34        // Value required to use 9600 baud
#define BR1_FOR_9600    0x00        // Value required to use 9600 baud
#define CLK_MOD         0x4911      // Microcontroller will "clean-up" clock signal


#include "lcd.h"
#include "graphics.h"
#include "color.h"
#include "ports.h"

int number_ppl = 0;
int original_ppl = 0;
int number_enter = 0;
int number_left = 0;
int max = 999;

int pos1 = 15;
int pos2 = 35;
int pos3 = 55;
int pos4 = 95;

// coutnter for LCD
int lcd_counter = 0;

// checkign both triggger
int trigger1 = 0;
int trigger2 = 0;
int trig_count = 0;
int first_trig = 0;


void introScreen(void) {
    clearScreen(1);


    setColor(COLOR_16_WHITE);
    drawString(2, pos1, FONT_LG, "# in Room");
    drawString(2, pos2, FONT_LG, "# Enter");
    drawString(2, pos3, FONT_LG, "# Left");


    drawString(2, pos4, FONT_LG, "Max");

    setColor(COLOR_16_WHITE);

    drawRect(0,0,159,127);

    update_values(number_ppl,pos1);
    update_values(number_enter,pos2);
    update_values(number_left,pos3);
    update_values(max,pos4);
}


/*
 *  Needs to write data to the device using spi. We will only want to write to
 *  the device we wont worry the reads.
 */


void intuClear(void) {
    setColor(COLOR_16_BLACK); //"intuitive" to clear the screen

    setColor(COLOR_16_WHITE); //"intuitive" to clear the screen

    //TA3CCTL0 = CCIE;      // Enable debounce timer interrupt
    //TA3CTL = TIMER_CFG_UP;    // Start debounce timer
}



void writeData(uint8_t data) {
    P2OUT |= LCD_DC_PIN;
    while (!(UCTXIFG & UCB0IFG));
    UCB0TXBUF = data;
    //return UCB0TXBUF;
    //P2OUT &= ~LCD_DC_PIN;
}


/*
 *  Needs to write commands to the device using spi
 */


void writeCommand(uint8_t command) {
    P2OUT &= ~LCD_DC_PIN;
    while (!(UCTXIFG & UCB0IFG));
    UCB0TXBUF = command;
    //return UCB0TXBUF;
    //P2OUT &= ~LCD_DC_PIN;
}


void wait(int pace) {
    volatile unsigned loops = pace; // Rate at which snake moves
    while (--loops > 0);             // Count down until the delay counter reaches 0
}

// Implementation of itoa()
char* itoa(int num, char* str, int base)
{
    int i = 0;
    int isNegative = 0;

    /* Handle 0 explicitely, otherwise empty string is printed for 0 */
    if (num == 0)
    {
        str[i++] = '0';
        str[i] = '\0';
        return str;
    }

    // In standard itoa(), negative numbers are handled only with
    // base 10. Otherwise numbers are considered unsigned.
    if (num < 0 && base == 10)
    {
        isNegative = 1;
        num = -num;
    }

    // Process individual digits
    while (num != 0)
    {
        int rem = num % base;
        str[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
        num = num/base;
    }

    // If number is negative, append '-'
    if (isNegative)
        str[i++] = '-';

    str[i] = '\0'; // Append string terminator

    // Reverse the string
    //reverse(str, i);

    return str;
}

void update_values(int value, int location) {

    int tempNum = value;

    int thirdDigit = (tempNum % 10);

    if (tempNum != 0) {
    tempNum = tempNum/10;
    }

    int secondDigit = (tempNum % 10);

    if (tempNum != 0) {
    tempNum = tempNum/10;
    }

    int firstDigit = (tempNum % 10);

    char str[2];
    //sprintf(str, "%d", thirdDigit);

    itoa(firstDigit, str, 10);

    drawString(115, location, FONT_LG, str);

    itoa(secondDigit, str, 10);
    //sprintf(str, "%d", secondDigit);

    drawString(130, location, FONT_LG, str);

    itoa(thirdDigit, str, 10);
    //sprintf(str, "%d", firstDigit);

    drawString(145, location, FONT_LG, str);

}

void initMSP430(void) {


    /************************** PWM Backlight ******************************/


    P2DIR   |= BIT4;
    P2SEL0  |= BIT4;
    P2SEL1  &= ~BIT4;
    TB0CCR0  = 500;
    TB0CCTL3 = OUTMOD_7;
    TB0CCR3  = 450;
    TB0CTL   = TBSSEL__ACLK | MC__UP | TBCLR;


    /******************************** SPI **********************************/


    P1DIR |= BIT0;


    P2DIR  |=   LCD_DC_PIN | LCD_CS_PIN;            // DC and CS
    P1SEL0 |=   LCD_MOSI_PIN | LCD_UCBCLK_PIN;      // MOSI and UCBOCLK
    P1SEL1 &= ~(LCD_MOSI_PIN | LCD_UCBCLK_PIN);


    P2OUT &= ~(LCD_DC_PIN | LCD_CS_PIN);


    UCB0CTLW0 |= UCSWRST;       // Reset UCB0


    //P2DIR &= ~BIT2;
    //P2REN |= BIT2;            // Connect resistor on P1.1 to P1OUT
    //P2OUT |= BIT2;            // Set output register for P1.1 to '1'

    P1DIR |= BIT0;            // Make P1.0 an output
    P9DIR |= BIT7;            // Make P1.0 an output


    //
    P2DIR &= ~BIT2;                       // Set pin P2.0 to be an input
    P2REN |=  BIT2;                       // Enable internal pullup/pulldown resistor on P2.0
    P2OUT |=  BIT2;                       // Pullup selected on P2.0
    P2IES &=  ~BIT2;                           // Make P2.0 interrupt happen on the rising edge
    P2IFG &= ~BIT2;                           // Clear the P2.0 interrupt flag
    P2IE  |=  BIT2;                           // Enable P2.0 interrupt

    P2DIR &= ~BIT0;                       // Set pin P2.0 to be an input
    P2REN |=  BIT0;                       // Enable internal pullup/pulldown resistor on P2.0
    P2OUT |=  BIT0;                       // Pullup selected on P2.0
    P2IES &=  ~BIT0;                           // Make P2.0 interrupt happen on the rising edge
    P2IFG &= ~BIT0;                           // Clear the P2.0 interrupt flag
    P2IE  |=  BIT0;                           // Enable P2.0 interrupt

    /*
     * UCBxCTLW0     - eUSCI_Bx Control Register 0
     * UCSSEL__SMCLK - SMCLK in master mode
     * UCCKPL        - Clocl polarity select
     * UCMSB         - MSB first select
     * UCMST         - Master mode select
     * UCMODE_0      - eUSCI mode 3-pin SPI select
     * UCSYNC        -  Synchronous mode enable
     */
    UCB0CTLW0 |= UCSSEL__SMCLK | UCCKPL | UCMSB | UCMST | UCMODE_0 | UCSYNC;


    UCB0BR0   |= 0x01;         // Clock = SMCLK/60
    UCB0BR1    = 0;
    UCB0CTL1  &= ~UCSWRST;     // Clear UCSWRST to release the eUSCI for operation
    //UCB0IE |= UCTXIE;


    TA2CCR0 = 65535;                // 25 ms * 32768 Hz = 819.2 ticks debounce delay
    TA2CTL =   ID_3 | TASSEL_2 | MC__STOP | TACLR;     // Configure debounce timer but don't start it

    TA3CCR0 = 65535;                // 25 ms * 32768 Hz = 819.2 ticks debounce delay
    TA3CTL =   ID_3 | TASSEL_2 | MC__STOP | TACLR;     // Configure debounce timer but don't start it

    PM5CTL0   &= ~LOCKLPM5;    // Unlock ports from power manager

    __enable_interrupt();         // Set global interrupt enable bit in SR register
}

#pragma vector = PORT2_VECTOR // associate funct . w/ interrupt vector
__interrupt void Port_2 ( void ) {
    //if (!interStop) {
    //    P2IFG &= ~ BIT2;
    //}

    if( P2IFG & BIT2){


        P1OUT |= BIT0;
        P2IFG &= ~ BIT2;
        trigger1 = 1;


        if (first_trig == 0) {

            first_trig = 1;

            TA3CCTL0 = CCIE;                 // Disable debounce timer interrupt
            TA3CTL = TIMER_CFG_UP;      // Stop debounce timer
        }
    }

    else if( P2IFG & BIT0){

        P9OUT |= BIT7;
        P2IFG &= ~ BIT0;
        trigger2 = 1;

        if (first_trig == 0) {

            first_trig = 2;

            TA3CCTL0 = CCIE;                 // Disable debounce timer interrupt
            TA3CTL = TIMER_CFG_UP;      // Stop debounce timer
        }

    }



}

#pragma vector = TIMER3_A0_VECTOR
__interrupt void actual_check()
{
    TA3CCTL0 = 0;                 // Disable debounce timer interrupt
    TA3CTL = TIMER_CFG_STOP;      // Stop debounce timer

    if (trig_count ==3 ) {
        if (trigger1 ==1 && trigger2) {

            if (first_trig == 1) {
                number_ppl = number_ppl + 1;
            }
            else if (first_trig == 2) {

                if (number_ppl > 0) {
                    number_ppl = number_ppl - 1;
                }
            }
            first_trig = 0;
            trigger1 =0;
            trigger2= 0;
            trig_count = 0;
        }
        else {

            first_trig = 0;
            trigger1 =0;
            trigger2= 0;
            trig_count = 0;
        }
    }
    else {

        trig_count = trig_count + 1;

        TA3CCTL0 = CCIE;                 // Disable debounce timer interrupt
        TA3CTL = TIMER_CFG_UP;      // Stop debounce timer

    }
}

#pragma vector = TIMER2_A0_VECTOR
__interrupt void lcd_timer()
{
    TA2CCTL0 = 0;                 // Disable debounce timer interrupt
    TA2CTL = TIMER_CFG_STOP;      // Stop debounce timer

    P1OUT &= ~BIT0;
    P9OUT &= ~BIT7;

    if (number_ppl < 125) {
        //number_ppl = number_ppl + 1;
        //number_enter = number_enter + 1;
    }

    if (lcd_counter== 6) {

        //if (original_ppl != number_ppl) {
            uint8_t nval = number_ppl;
            UCA0TXBUF = nval;
        //}
        introScreen();
        lcd_counter = 0;
        original_ppl = number_ppl;
    }
    else {
        lcd_counter = lcd_counter + 1;
    }

    TA2CCTL0 = CCIE;        // Enable debounce timer interrupt
    TA2CTL = TIMER_CFG_UP;  // Start debounce timer
}

void assign_pins_to_uart(void)
{
    P4SEL1 = 0x00; // 0000 0000
    P4SEL0 = BIT3 | BIT2; // 0000 1100
    // ^^
    // ||
    // |+---- 01 assigns P4.2 to UART Transmit (TXD)
    // |
    // +----- 01 assigns P4.3 to UART Receive (RXD)
}

#pragma vector=USCI_A0_VECTOR
__interrupt void UART_ISR(void)
{
    int i = 0;

    //P1OUT = BIT0 | BUTTON11;        // Turn on the red led

    for(i = 0; i < 5000; i++);

    //P1OUT = BUTTON11;

    if(UCA0RXBUF > 0x3A)            // If the messaged received at P4.3 is great that 0x3A
    {
        //P9OUT = GREEN_ON;           // Turn on the green LED
    }
    else
    {
        //P9OUT = GREEN_OFF;          //Else the green LED should be off
    }


    UCA0IFG = UCA0IFG & (~UCRXIFG); // Clear RX Interrupt FlaG
}

//*********************************************************************************
//* Specify UART Baud Rate *
//*********************************************************************************
void use_9600_baud(void)
{
    UCA0CTLW0 = UCSWRST; // Put UART into SoftWare ReSeT
    UCA0CTLW0 = UCA0CTLW0 | UART_CLK_SEL; // Specifies clock source for UART
    UCA0BR0 = BR0_FOR_9600; // Specifies bit rate (baud) of 9600
    UCA0BR1 = BR1_FOR_9600; // Specifies bit rate (baud) of 9600
    UCA0MCTLW = CLK_MOD; // "Cleans" clock signal
    UCA0CTLW0 = UCA0CTLW0 & (~UCSWRST); // Takes UART out of SoftWare ReSeT
}

void main(void) {
    WDTCTL = WDTPW | WDTHOLD;   // kill the watchdog


    initMSP430();


    __delay_cycles(10);


    initLCD();

    TA2CCTL0 = CCIE;        // Enable debounce timer interrupt
    TA2CTL = TIMER_CFG_UP;  // Start debounce timer

    introScreen();

    assign_pins_to_uart();          // P4.2 is for TXD, P4.3 is for RXD
    use_9600_baud();                // UART operates at 9600 bits/second

    //UCA0IE = UCRXIE;                // Enable RX interupt
    _BIS_SR(GIE);                   // Activate enabled UART RXD interrupt

    while (1) {

        //if (!(P2IN & BIT2)) {
        //    P1OUT &= ~BIT0;
        //}
        //else {
        //    number_ppl = number_ppl + 1;
        //    number_enter = number_enter + 1;
        //    P1OUT &= ~BIT0;
        //    P1OUT |= BIT0;
        //}

        //wait(60000);
        //wait(60000);
        //wait(60000);
        //wait(60000);
        //wait(60000);
        //wait(60000);

        //if (number_ppl < 30) {
        //introScreen();
        //}
    }
}








